#!/usr/bin/env amm3

import $ivy.`com.zhranklin:scala-tricks_2.13:0.2.1`
import $ivy.`com.lihaoyi:ammonite-ops_2.13:2.4.0-23-76673f7f`
import $ivy.`com.flipkart.zjsonpatch:zjsonpatch:0.4.11`
import $ivy.`com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.11`
import $ivy.`com.lihaoyi::os-lib:0.8.0`
import $ivy.`org.springframework:spring-core:5.1.7.RELEASE`
import $ivy.`org.fusesource.jansi:jansi:2.2.0`
import $ivy.`io.github.java-diff-utils:java-diff-utils:4.5`
import $ivy.`com.github.scopt::scopt:4.0.1`
import $ivy.`org.scala-lang.modules::scala-parser-combinators:2.1.1`

import java.io.File
import scala.collection.mutable
import scala.collection.MapView

import ammonite.ops.ShelloutException
import com.fasterxml.jackson.databind.node.{ArrayNode, JsonNodeFactory, ObjectNode, TextNode, MissingNode}
import com.fasterxml.jackson.databind.{JsonNode, ObjectMapper}
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory
import com.flipkart.zjsonpatch.{DiffFlags, JsonDiff}
import com.github.difflib.text.DiffRowGenerator
import io.circe.Json
import zrkn.op._
import org.springframework.util.AntPathMatcher
import com.fasterxml.jackson.databind.node.NullNode
import java.util.regex.Matcher
import scala.language.dynamics

import scala.jdk.CollectionConverters._

object c:
  extension (s: String)
    def unescapePath: String = s.replaceAll("~0", "~").replaceAll("~1", "/")

  import org.fusesource.jansi.Ansi.{Color, ansi}
  import org.fusesource.jansi.Ansi.Attribute._
  val MARK_DELETE_LINE = "<DELETE_LINE>"
  val MARK_MODIFY_LINE = "<MODIFY_LINE>"
  val MARK_ADD_LINE = "<INSERT_LINE>"
  val TAG_DELETE = "<DELETE>"
  val TAG_ADD = "<ADD>"
  val TAG_END = "<RESET>"
  val MARK_DELETE_FIELD = "<DELETE_FIELD>"
  val MARK_ADD_FIELD = "<ADD_FIELD>"
  val DELETE = ansi().fg(Color.RED).a(STRIKETHROUGH_ON).a(INTENSITY_BOLD).toString
  val ADD = ansi().fg(Color.GREEN).a(INTENSITY_BOLD).toString
  val RESET = ansi().reset().toString
  val MINUS = ansi().render("@|red -|@").toString
  val PLUS = ansi().render("@|green +|@").toString
  val TILDE = ansi().render("@|yellow ~|@").toString
import c.unescapePath

trait ValueMatcher:
  val newNode = JsonNodeFactory.instance.pojoNode _
  def matches(node: JsonNode, basePath: String, value: JsonNode): Boolean
  def jsonEquals(v1: JsonNode, v2: JsonNode) =
    ValueMatcher.jsonMapper.readTree(v1.toString) == (ValueMatcher.jsonMapper.readTree(v2.toString))

object ValueMatcher:
  val jsonMapper = new ObjectMapper()
  def exact(v: Any) = new ValueMatcher:
    val expect = newNode(v)
    def matches(node: JsonNode, basePath: String, value: JsonNode) = jsonEquals(expect, value)
    override def toString = s"exact($v)"

  def ref(path: String) = new ValueMatcher:
    def getValue(obj: JsonNode, path: String): Option[JsonNode] =
      var cur = obj
      path.split("/").dropRight(1).drop(1)
        .foreach { pp =>
          val p = pp.replaceAll("~1", "/")
          cur match
            case c: ArrayNode if p.toIntOption.nonEmpty =>
              cur = c.get(p.toInt)
            case c: ObjectNode =>
              cur = c.get(p)
            case _ =>
              return None
        }
      val last = path.split("/").last
      Option(cur).flatMap(c => Option(c.get(last)))
    end getValue
    def matches(node: JsonNode, basePath: String, value: JsonNode) =
      var p = path
      if !p.startsWith("./") && !p.startsWith("/") then
        p = "./" + p
      p = p
        .replaceAll("^./", basePath + "/")
        .replaceAll("[^/]+/\\.\\./", "")
      getValue(node, p).exists(jsonEquals(_, value))
    end matches
    override def toString = s"ref($path)"

  object always extends ValueMatcher:
    def matches(node: JsonNode, basePath: String, value: JsonNode) = true
    override def toString = "always"

val defaultIgnores = """
* {
  /**/checksum~1config-volume*: always
  /apiVersion: always
  /metadata/annotations/autoscaling.alpha.kubernetes.io/conditions: always
  /metadata/annotations/autoscaling.alpha.kubernetes.io/current-metrics: always
  /metadata/annotations/deployment.kubernetes.io/revision: always
  /metadata/annotations/kubectl.kubernetes.io/last-applied-configuration: always
  /metadata/creationTimestamp: always
  /metadata/finalizers: always
  /metadata/generation: always
  /metadata/labels/release: always
  /metadata/managedFields: always
  /metadata/resourceVersion: always
  /metadata/selfLink: always
  /metadata/uid: always
  /spec/selector/matchLabels/release: always
  /spec/template/metadata/creationTimestamp: always
  /spec/template/metadata/generation: always
  /spec/template/metadata/labels/release: always
  /spec/template/metadata/resourceVersion: always
  /spec/template/metadata/selfLink: always
  /spec/template/metadata/uid: always
  /status: always
  /webhooks/*/clientConfig/caBundle: always
}
Deployment {
  /spec/progressDeadlineSeconds: exact(600)
  /spec/revisionHistoryLimit: exact(10)
  /spec/strategy/type: exact(RollingUpdate)
  /spec/template/spec/serviceAccount: ref(../serviceAccountName)
  /spec/template/spec/containers/*/imagePullPolicy: exact(IfNotPresent)
  /spec/template/spec/containers/*/ports/*/protocol: exact(TCP)
  /spec/template/spec/containers/*/*Probe/failureThreshold: exact(3)
  /spec/template/spec/containers/*/*Probe/periodSeconds: exact(3)
  /spec/template/spec/containers/*/*Probe/timeoutSeconds: exact(3)
  /spec/template/spec/containers/*/*Probe/http*/scheme: exact(HTTP)
  /spec/template/spec/containers/*/*/successThreshold: exact(1)
  /spec/template/spec/containers/*/terminationMessagePath: exact(/dev/termination-log)
  /spec/template/spec/containers/*/terminationMessagePolicy: exact(File)
  /spec/template/spec/dnsPolicy: exact(ClusterFirst)
  /spec/template/spec/restartPolicy: exact(Always)
  /spec/template/spec/schedulerName: exact(default-scheduler)
  /spec/template/spec/securityContext: exact([])
  /spec/template/spec/terminationGracePeriodSeconds: exact(30)
  /spec/template/spec/volumes/*/*/defaultMode: exact(420)
  /metadata/annotations/deployment.kubernetes.io~1revision: always
}
Service {
  /spec/clusterIP: always
  /spec/ports/*/protocol: exact(TCP)
  /spec/sessionAffinity: exact(None)
  /spec/type: exact(ClusterIP)
  /spec/ports/*/targetPort: ref(../port)
}
ServiceAccount {
  /secrets: always
}
MutatingWebhookConfiguration {
  /webhooks/*/clientConfig/service/port: exact(443)
  /webhooks/*/matchPolicy: exact(Exact)
  /webhooks/*/objectSelector: exact([])
  /webhooks/*/reinvocationPolicy: exact(Never)
  /webhooks/*/rules/*/scope: exact(*)
  /webhooks/*/timeoutSeconds: exact(30)
}
"""

object IgnoreRulesParser extends scala.util.parsing.combinator.RegexParsers {
  import scala.util.parsing.combinator._
  def groups: Parser[IgnoreRules] = rep(group) ^^ (_.toMap)
  def group = kind ~ "{" ~ rep(rule) ~ "}" ^^ {
    case k ~ _ ~ matches ~ _ => k -> matches
  }
  def kind = """\w+""".r | "*"
  def rule: Parser[(String, ValueMatcher)] = """[^:\s]+""".r ~ ":" ~ valueMatcher ^^ { case p ~ _ ~ vm => p -> vm }
  def valueMatcher = always | exact | ref
  def always = "always" ^^ { _ => ValueMatcher.always}
  def exact = "exact" ~ "(" ~ (("""\d+""".r ^^ {_.toInt}) | ("""[]""" ^^ {_ => new java.util.HashMap()}) | ("""[^\s()]*""".r)) ~ ")" ^^ {
    case _ ~ _ ~ param ~ _ => ValueMatcher.exact(param)
  }
  def ref = "ref" ~ "(" ~ """[^\s()]+""".r ~ ")" ^^ {
    case _ ~ _ ~ param ~ _ => ValueMatcher.ref(param)
  }
  def parse0(s: String): IgnoreRules = parseAll(groups, s) match
    case Success(matched, _) => matched
    case Failure(msg, _) =>
      println(msg)
      throw new Exception
    case Error(msg, _) =>
      println(msg)
      throw new Exception
  def parseAndMerge(s: Seq[String]): IgnoreRules =
    val result: mutable.Map[String, List[(String, ValueMatcher)]] = mutable.Map()
    s.map(parse0).foreach { i =>
      i.foreach {
        case (k, v) =>
          if (result.contains(k))
            result.update(k, result(k).++(v))
          else result.put(k, v)
      }
    }
    result.toMap
  end parseAndMerge
}
type IgnoreRules = Map[String, List[(String, ValueMatcher)]]

object Models:
  case class DocID(id: String, `tpe`: String = "Yaml Doc"):
    override def toString: String = s"$tpe $id"
  class GVK(val kind: String, val name: String, val namespace: String) extends DocID(s"$kind/$name${if(namespace.isEmpty)""else s".$namespace"}", "K8s Resource")
  case class YamlDoc(yaml: String, tree: JsonNode, obj: Json, id: DocID)

  trait Changes:
    def sorting: String
  case class NewResource(doc: YamlDoc, show: Boolean) extends Changes:
    import c._, doc.id
    override def toString = s"---\n$ADD# New $id${if (show) s"\n${doc.yaml}" else ""}$RESET"
    override def sorting = s"3$id"
  case class RemovedResource(doc: YamlDoc, show: Boolean) extends Changes:
    import c._, doc.id
    override def toString = s"---\n$DELETE# Removed $id${if (show) s"\n${doc.yaml}" else ""}$RESET"
    override def sorting = s"2$id"
  case class DiffResource(id: DocID, changes: ObjectNode) extends Changes:
    import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator.Feature._
    override def toString =
      val factory = new YAMLFactory()
        .disable(WRITE_DOC_START_MARKER)
        .enable(MINIMIZE_QUOTES)
      s"---\n# Diffs in $id\n${new ObjectMapper(factory).writeValueAsString(changes)}"
    end toString
    override def sorting = s"1$id"

object YamlDocs:
  import Models.{DocID, GVK, YamlDoc}
  trait SourceDatabase:
    def get(id: DocID)(using args: Args): Option[YamlDoc]
  object FromK8s extends SourceDatabase:
    def get(id: DocID)(using args: Args): Option[YamlDoc] = id match {
      case gvk: GVK => get(gvk)
      case _ => None
    }
    def get(gvk: GVK)(using args: Args): Option[YamlDoc] =
      import gvk._
      try
        YamlDocs.read(ammonite.ops.%%("bash", "-c", s"kubectl get $kind -oyaml $name ${if (namespace.isEmpty) "" else s"-n $namespace"}")(wd).out.string, true, None)
      catch
        case e: ShelloutException if e.result.err.string.contains("(NotFound)")
          || e.result.err.string.contains("doesn't have a resource type") => None
    end get

  class Static(src: => String, isK8s: Boolean) extends SourceDatabase:
    var _sobj: MapView[DocID, YamlDoc] = _
    def sourceObjs(using args: Args) =
      if (_sobj == null)
        _sobj = src.split("(\n|^)---\\s*(\n|$)")
          .zipWithIndex
          .flatMap{ case (y, i) => YamlDocs.read(y, isK8s, Some(i))}
          .groupBy(_.id)
          .view
          .mapValues(_.head)
      _sobj
    def get(id: DocID)(using args: Args) = sourceObjs.get(id)

  def expandTextToYaml(node: JsonNode): Unit =
    node match
      case node: ObjectNode =>
        node.fields().asScala
          .flatMap { kv =>
            kv.getValue match
              case v: TextNode =>
                io.circe.yaml.parser.parse(v.textValue()).toOption
                  .filter(_.isObject)
                  .map { _ =>
                    (kv.getKey, new ObjectMapper(new YAMLFactory).readTree(v.textValue()))
                  }
              case v: ObjectNode =>
                expandTextToYaml(v)
                None
              case _ => None
          }
          .foreach { case (k, v) =>
            node.put(k, v)
          }
      case _ =>
  end expandTextToYaml

  val pathMatcher = new AntPathMatcher()
  def removeIgnoredFields(root: JsonNode, node: JsonNode, path: String, defaults: List[(String, ValueMatcher)])(using args: Args): Boolean =
    val shouldIgnore = defaults.exists { case pt -> expect =>
      pathMatcher.`match`(pt, path) &&
        expect.matches(root, path, node)
    }
    node match
      case _ if shouldIgnore =>
        if (args.debug.ignore)
          println(s"$path: $node")
        true
      case node: ObjectNode =>
        node.fields().asScala
          .filter { kv =>
            removeIgnoredFields(root, kv.getValue, s"$path/${kv.getKey}", defaults)
          }
          .map(_.getKey)
          .toList
          .foreach { key =>
            node.remove(key)
          }
        false
      case node: ArrayNode =>
        node.elements().asScala.toList.zipWithIndex
          .filter { case (n, i) =>
            removeIgnoredFields(root, n, s"$path/$i", defaults)
          }
          .map(_._2)
          .reverse
          .foreach { i =>
            node.remove(i)
          }
        false
      case _ =>
        if (args.debug.ignore)
          println(s"$path: $node")
        false
  end removeIgnoredFields

  def read(yaml: String, k8s: Boolean, index: Option[Int])(using args: Args): Option[YamlDoc] =
    if (yaml.trim.isEmpty) return None
    import scala.util
    util.Try {
      val tree = new ObjectMapper(new YAMLFactory).readTree(yaml)
      if (tree == null || tree.isInstanceOf[MissingNode] || tree.isInstanceOf[NullNode]) {
        throw RuntimeException("EMPTY_OBJECT")
      }
      if (args.f.k8s) {
        val kind = tree.get("kind").asText()
        removeIgnoredFields(tree, tree, "", args.ignoreRules.getOrElse(kind, Nil) ::: args.ignoreRules.getOrElse("*", Nil))
      }
      if (args.f.expandText)
        expandTextToYaml(tree)
      val obj = io.circe.yaml.parser.parse(new ObjectMapper(new YAMLFactory).writeValueAsString(tree)) match {
        case Left(value) =>
          throw value.underlying
        case Right(value) =>
          value
      }
      val id = if (k8s) {
        import io.circe.optics.JsonPath.root
        val name = root.metadata.name.string.getOption(obj).get
        val namespace = root.metadata.namespace.string.getOption(obj).getOrElse("")
        val kind = root.kind.string.getOption(obj).get
        new GVK(kind, name, namespace)
      } else DocID(index.get.toString)
      Models.YamlDoc(yaml, tree, obj, id)
    } .recoverWith[YamlDoc] {
      case t: RuntimeException if t.getMessage == "EMPTY_OBJECT" =>
        util.Failure(t)
      case t =>
        io.circe.yaml.parser.parse(yaml) match
          case Right(Json.False) =>
          case _ =>
            println(yaml)
            t.printStackTrace();
        util.Failure(t)
      }.toOption
  end read

import ammonite.ops._
object YamlDiffer:
  import DiffFlags._
  val DIFF_FLAGS = java.util.EnumSet.of(OMIT_MOVE_OPERATION, OMIT_COPY_OPERATION, ADD_ORIGINAL_VALUE_ON_REPLACE)
  val diffRowGenerator = DiffRowGenerator.create()
    .showInlineDiffs(true)
    .inlineDiffByWord(true)
    .oldTag(f => if (f) c.TAG_DELETE else c.TAG_END)
    .newTag(f => if (f) c.TAG_ADD else c.TAG_END)
    .mergeOriginalRevised(true)
    .lineNormalizer(identity)
    .build()
  def generateDiffText(from: JsonNode, to: JsonNode) =
    val splitNode = (_: JsonNode) match
      case n: TextNode => n.textValue().split("\n").toList.asJava
      case n => n.toString.split("\n").toList.asJava
    diffRowGenerator.generateDiffRows(splitNode(from), splitNode(to)).asScala
      .flatMap { l =>
        import c._, l._
        import com.github.difflib.text.DiffRow.Tag
        val mode = getTag match
          case Tag.INSERT => MARK_ADD_LINE
          case Tag.DELETE => MARK_DELETE_LINE
          case Tag.CHANGE => MARK_MODIFY_LINE
          case Tag.EQUAL => ""
        List(s"$mode$getOldLine")
      }
      .mkString("\n")
  end generateDiffText

  def doDiff(using _args: Args): Unit =
    import Models.{NewResource, RemovedResource, DiffResource}
    println("analyzing...")
    given args: Args = _args.copy(
      ignoreRules = IgnoreRulesParser.parseAndMerge(List(defaultIgnores).filterNot(_ => _args.f.noIgnore) ::: _args.extraIgnores ::: _args.extraIgnoreFiles.map(p => read(oPath(p))))
    )
    if (args.debug.ignoreRules)
      println(args.ignoreRules.toString().replaceAll(", ", ",\n"))
    val targetDocs = new YamlDocs.Static(read(args.target), args.f.k8s).sourceObjs.values
    targetDocs
      .flatMap { target =>
        args.source.get(target.id) match
          case None => Some(NewResource(target, args.f.showNew))
          case Some(source) =>
            val result = JsonNodeFactory.instance.objectNode()
            JsonDiff.asJson(source.tree, target.tree, DIFF_FLAGS)
              .asInstanceOf[ArrayNode].elements().asScala.toList
              .foreach { n =>
                import c._
                val path = n.get("path").asText()
                val value = n.get("value")
                import com.fasterxml.jackson.databind.node.JsonNodeType._
                n.get("op").asText() match
                  case "remove" =>
  //                  if (!shouldIgnore(target, path, value))
                      setValue(result, s"$path$MARK_DELETE_FIELD", value)
                  case "add" =>
                    setValue(result, s"$path$MARK_ADD_FIELD", value)
                  case "replace" => (n.get("fromValue"), value) match
                    case (from: TextNode, to: TextNode) if List(from, to).exists(_.textValue().contains("\n")) =>
                      val diffText = generateDiffText(from, to)
                      //                    println(diffText.split("\n").map("###" + _).mkString("\n"))
                      val processed = stripMultiLineDiff(processCrossLineDiff(diffText))
                      //                    println(processed.split("\n").map("$$$" + _).mkString("\n"))
                      setValue(result, path, JsonNodeFactory.instance.textNode(processed))
                    case (from, to)
                      if from.getNodeType == to.getNodeType && !Set(ARRAY, OBJECT, POJO).contains(from.getNodeType) =>
                      val rawdiff = generateDiffText(from, to)
                      val o = rawdiff.replaceAll(s"^$MARK_DELETE_LINE|^$MARK_ADD_LINE|^$MARK_MODIFY_LINE", "")
                      val mode = rawdiff.replaceAll(s"(^$MARK_DELETE_LINE|^$MARK_ADD_LINE|^$MARK_MODIFY_LINE|).*", "$1")
                      val dir = path.split("/").dropRight(1).mkString("/")
                      val key = path.split("/").last
                      setValue(result, s"$dir/$mode$key", JsonNodeFactory.instance.textNode(o))
                    case (from, to) =>
                      setValue(result, s"$path$MARK_DELETE_FIELD", from)
                      setValue(result, s"$path$MARK_ADD_FIELD", to)
              }
            Some(result).filterNot(_.isEmpty()).map(DiffResource(target.id, _))
      }
      .toList
      .++ {
        args.source match {
          case ydb: YamlDocs.Static =>
            ydb.sourceObjs
              .keySet.toSet
              .diff(targetDocs.map(_.id).toSet)
              .map(ydb.sourceObjs.apply)
              .map(doc => RemovedResource(doc, args.f.showRemoved))
          case _ => Nil
        }
      }
      .sortBy(_.sorting)
      .foreach { res =>
        import c._
        var indent = 0
        var lineTemplate = " $1$2"
        res.toString.split("\n").foreach { line =>
          val ind = line.replaceAll("^( *(- )?).*", "$1").length
          if (line.contains(s"$MARK_DELETE_FIELD:"))
            indent = ind
            lineTemplate = s"$MINUS$$1$DELETE$$2$RESET"
          else if (line.contains(s"$MARK_ADD_FIELD:"))
            indent = ind
            lineTemplate = s"$PLUS$$1$ADD$$2$RESET"
          else if (ind <= indent && line.trim.nonEmpty)
            indent = 0
            lineTemplate = " $1$2"
          if (args.debug.unrendered)
            println(line + "<unrendered>")
          println {
            if (line.isEmpty) ""
            else if (lineTemplate == " $1$2") line
              .replaceAll(s"^.(\\s*)$MARK_DELETE_LINE(.*)", s"$MINUS$$1$$2")
              .replaceAll(s"^.(\\s*)$MARK_ADD_LINE(.*)", s"$PLUS$$1$$2")
              .replaceAll(s"^.(\\s*)$MARK_MODIFY_LINE(.*)", s"$TILDE$$1$$2")
              .replaceAll(TAG_DELETE, DELETE)
              .replaceAll(TAG_ADD, ADD)
              .replaceAll(TAG_END, RESET)
            else line
              .replaceAll(s"($MARK_DELETE_FIELD|$MARK_ADD_FIELD):", ":")
              .replaceAll(".( *)(.*)", lineTemplate)
          }
        }
        print(RESET)
      }
  end doDiff

  def setValue(obj: ObjectNode, path: String, value: JsonNode): Unit =
    var cur = obj
    path.split("/").dropRight(1).drop(1)
      .foreach{ pp =>
        val p = pp.unescapePath
        if (cur.get(p) == null)
          cur.put(p, JsonNodeFactory.instance.objectNode())
        cur = cur.get(p).asInstanceOf[ObjectNode]
      }
    cur.put(path.split("/").last.unescapePath, value)
  end setValue

  val MARKER_PT = java.util.regex.Pattern.compile(s"(?s)(${c.TAG_ADD}|${c.TAG_DELETE}).*?${c.TAG_END}")
  // e.g.
  // Change:
  // <MODIFY_LINE>    ...<DELETE>io/stats-job-name: "istio-mesh"
  // <MODIFY_LINE>    security.<RESET>istio.io/....
  // To:
  // <MODIFY_LINE>    ...<DELETE>io/stats-job-name: "istio-mesh"<RESET>
  // <MODIFY_LINE>    <DELETE>security.<RESET>istio.io/....
  def processCrossLineDiff(diff: String): String =
    val mth = MARKER_PT.matcher(diff)
    val b = new StringBuffer()
    while (mth.find()) {
      val matched = mth.group()
      val tagStart = mth.group(1)
      val replacement =
        if (matched.contains("\n"))
          matched.replaceAll(s"\n(${c.MARK_MODIFY_LINE})?", s"${c.TAG_END}$$0$tagStart")
        else Matcher.quoteReplacement(matched)
      mth.appendReplacement(b, replacement)
    }
    mth.appendTail(b)
    b.toString
  end processCrossLineDiff

  def stripMultiLineDiff(diff: String)(using args: Args): String =
    val aroundLines = args.multiLineAroundLines
    import c._
    val lines = diff.linesWithSeparators.toList
    var hasSkipped = false
    val resultLines = mutable.ListBuffer[String]()
    val markedLines = lines.map(_.matches(s"(?s).*($MARK_DELETE_LINE|$MARK_MODIFY_LINE|$MARK_ADD_LINE).*"))
    markedLines
      .zipWithIndex
      .map{case (b, i) => b || markedLines.slice(i-aroundLines, i+aroundLines+1).contains(true)}
      .zip(lines)
      .foreach{ case (b, l) =>
        if (b) {
          resultLines.addOne(l)
          hasSkipped = false
        }
        else {
          if (!hasSkipped) {
            resultLines.addOne("<skipped...>\n")
            hasSkipped = true
          }
        }
      }
    resultLines.mkString("")
  end stripMultiLineDiff

case class Args(source: YamlDocs.SourceDatabase = YamlDocs.FromK8s,
                target: Path = root/"dev"/"stdin",
                extraIgnoreFiles: List[String] = Nil,
                extraIgnores: List[String] = Nil,
                flags: Set[String] = Set(),
                debugFlags: Set[String] = Set(),
                multiLineAroundLines: Int = 8,
                ignoreRules: IgnoreRules = Map(),
               ):
  class Flags(flags: Set[String]) extends Dynamic {
    def selectDynamic(name: String): Boolean = flags.contains(name)
  }
  val debug: Flags = new Flags(debugFlags)
  val f: Flags = new Flags(flags)

object Args:
  def flagF(f: String) = (_: Unit, a: Args) => a.copy(flags = a.flags.+(flagToToken(f)))
  def flagToToken(f: String) = "-([a-z])".r.replaceSomeIn(f, m => Some(m.group(1).toUpperCase))
  import scopt.OParser
  val builder = OParser.builder[Args]
  val parser = {
    import builder.{arg, _}
    OParser.sequence(
      programName("ydiff.sc"),
      head("Yaml Diff"),
      help('h', "help")
        .text("Show this help."),
      opt[Unit]("k8s")
        .text("Treat yaml docs as kubernetes resources.")
        .optional()
        .action(flagF("k8s")),
      opt[Unit]("show-new")
        .text("Show complete yaml text of new yaml docs.")
        .optional()
        .action(flagF("showNew")),
      opt[Unit]("show-removed")
        .text("Show complete yaml text of removed yaml docs.")
        .optional()
        .action(flagF("showRemoved")),
      opt[Unit]("no-ignore")
        .text("Don't use default ignore list.(k8s only)")
        .action(flagF("noIgnore")),
      opt[Int]('m', "multi-lines-around")
        .text("How many lines should be printed before and after\nthe diff line in multi-line string")
        .valueName("<lines>")
        .optional()
        .action((l, a) => a.copy(multiLineAroundLines = l)),
      opt[String]("extra-ignore")
        .text("Extra ignore rules, can be specified multiple times.")
        .valueName("<rule-text>")
        .optional()
        .action((i, a) => a.copy(extraIgnores = a.extraIgnores.appended(i))),
      opt[String]("extra-ignore-file")
        .text("Extra ignore rules file, can be specified multiple times.")
        .valueName("<file>")
        .optional()
        .action((p, a) => a.copy(extraIgnoreFiles = a.extraIgnoreFiles.appended(p))),
      opt[String]('d', "debug")
        .hidden()
        .action((d, a) => a.copy(debugFlags = a.debugFlags.+(flagToToken(d)))),
      arg[String]("source")
        .text("Source yaml file, specify \"<k8s>\" to fetch resource\nfrom kubernetes cluster, and default to be <k8s>.")
        .optional()
        .action((f, a) => a.copy(source = new YamlDocs.Static(read(oPath(f)), a.f.k8s))),
      arg[String]("target")
        .text("Target yaml file, default to be stdin.")
        .optional()
        .action((f, a) => a.copy(target = if (f.equals("-")) root/"dev"/"stdin" else oPath(f))),
      checkConfig {
        case a if a.source.isInstanceOf[YamlDocs.FromK8s.type] && !a.f.k8s => failure("You should add --k8s option when the source is kubernetes cluster.")
        case _ => success
      }
    )
  }

import mainargs.{main, arg, ParserForMethods, Leftover}
@main
def main(rest: Leftover[String]) =
  scopt.OParser.parse(Args.parser, rest.value, Args()) match {
    case Some(args) =>
      YamlDiffer.doDiff(using args)
    case _ =>
  }
end main
